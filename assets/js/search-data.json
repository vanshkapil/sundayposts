{
  
    
        "post0": {
            "title": "Some Shopify GraphQL queries to get you started",
            "content": "I have been trying to connect my AI shopping bot with Shopify API. This got me introduced to GraphQL. Here are some of the queries that I tried to get started. . API call function . We call this function with query as parameters to get the json object as response from Shopify. . def gq_query(data, variables): &quot;&quot;&quot; Queries the Shopify :param data: :param variables: :return: &quot;&quot;&quot; out = [] # the final output list of dictionaries to be converted to a DF shop = &#39;&lt;Your Store name&gt;&#39; token = &#39;&lt;Your store password&gt;&#39; headers = { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;X-Shopify-Access-Token&#39;: f&#39;{token}&#39;, } response = requests.post(f&#39;https://{shop}.myshopify.com/admin/api/2020-10/graphql.json&#39;, json={&#39;query&#39;: data, &#39;variables&#39;: variables}, headers=headers) return response.json() . Getting product count for a collection. . You may note that I am formatting the query as string and not passing the variables in query variable. This is not the best practice, but it got me started. . def get_productcount_fromCollection(handle): &quot;&quot;&quot; returns product count for given collection :param handle: :return: int count &quot;&quot;&quot; data = &#39;&#39;&#39; {{ collectionByHandle(handle: &quot;{}&quot;){{ productsCount }} }}&#39;&#39;&#39;.format(handle) variable = &#39;&#39;&#39; &#39;&#39;&#39; return gq_query(data, variable).get(&#39;data&#39;).get(&#39;collectionByHandle&#39;).get(&#39;productsCount&#39;) . Getting products from a collection . This query is tries to fetch upto 50 products from the given collection handle. You can change the number of products and even create it as a variable. Be mindfull of the query cost. This works well if you have fewer products in a collection. . def get_products_fromCollection(handle): &quot;&quot;&quot; Get all the products for given collection :param handle: :return: List of dicts with title:title and price:price &quot;&quot;&quot; obj = [] num = get_productcount_fromCollection(handle) data = f&#39;&#39;&#39; query {{ collectionByHandle(handle: &quot;{handle}&quot;){{ products(first: 50){{ pageInfo {{ hasNextPage hasPreviousPage }} edges{{ cursor node{{ id updatedAt title featuredImage{{ transformedSrc }} priceRangeV2{{ minVariantPrice{{ currencyCode amount }} }} }} }} }} }} }}&#39;&#39;&#39; variable = &#39;&#39;&#39; &#39;&#39;&#39; data_dict = gq_query(data, variable) . But what if there are thousands of products and you cannot fetch them in 1 call. That where we make use of pageInfo and cursor . . while data_dict.get(&#39;data&#39;).get(&#39;collectionByHandle&#39;).get(&#39;products&#39;).get(&#39;pageInfo&#39;).get(&#39;hasNextPage&#39;): time.sleep(5) cursor = data_dict.get(&#39;data&#39;).get(&#39;collectionByHandle&#39;).get(&#39;products&#39;).get(&#39;edges&#39;)[-1].get(&#39;cursor&#39;) data = f&#39;&#39;&#39; query {{ collectionByHandle(handle: &quot;{handle}&quot;){{ products(first: 50, after: &quot;{cursor}&quot;){{ pageInfo {{ hasNextPage hasPreviousPage }} edges{{ cursor node{{ id updatedAt title featuredImage{{ transformedSrc }} priceRangeV2{{ minVariantPrice{{ currencyCode amount }} }} }} }} }} }} }}&#39;&#39;&#39; variable = &#39;&#39;&#39; &#39;&#39;&#39; data_dict = gq_query(data, variable) . You may notice an attribute pageInfo in the query which has a field called hasNextPage . hasNextPage gives out Boolean result (True or False). If its True it means there another set of products waiting on the next page . data_dict.get(&#39;data&#39;).get(&#39;collectionByHandle&#39;).get(&#39;products&#39;).get(&#39;pageInfo&#39;).get(&#39;hasNextPage&#39;) . Once we recognize that there is another page of products we need to move that page without re-reading the current batch of products. The current batch of products is recognized by something called cursor . cursor = data_dict.get(&#39;data&#39;).get(&#39;collectionByHandle&#39;).get(&#39;products&#39;).get(&#39;edges&#39;)[-1].get(&#39;cursor&#39;) . The above call pulls the cursor of last product fetch, so we know that we have to fetch products after this cursor. . query {{ collectionByHandle(handle: &quot;{handle}&quot;){{ products(first: 50, after: &quot;{cursor}&quot;){{ pageInfo {{ hasNextPage hasPreviousPage }} . products(first: 50, after: &quot;{cursor}&quot;) Asks for 50 products after the given cursor . Fetch List of Collections . This function returns upto 200 collection&#39;s handles as a list . def get_collections_list(): &quot;&quot;&quot; gets handles of all the collections of the store. :return: list of handles &quot;&quot;&quot; data = f&#39;&#39;&#39; {{ collections(first: 200){{ edges{{ node{{ handle }} }} }} }} &#39;&#39;&#39; variable = &#39;&#39;&#39; &#39;&#39;&#39; data_dict = gq_query(data, variable) handle_list=[] for n in range(len(data_dict[&#39;data&#39;].get(&#39;collections&#39;).get(&#39;edges&#39;))): handle_list.append(data_dict[&#39;data&#39;].get(&#39;collections&#39;).get(&#39;edges&#39;)[n].get(&#39;node&#39;).get(&#39;handle&#39;)) return handle_list . Get product Updation details . There could be a situation wherein you may want to check when a product was last updated/modified or you may want to fetch products updated after a certain timestamp. This can be accomplished by looking for updatedAt attribute. . def get_updated_products(): &quot;&quot;&quot; gets updated products based on updateAt timestamp from shopify API :return: &quot;&quot;&quot; data = f&#39;&#39;&#39; {{ products(query:&quot;updated_at:&gt;{last_update_timestamp}&quot; first:800) {{ edges {{ node {{ id title updatedAt featuredImage{{ transformedSrc }} priceRangeV2{{ minVariantPrice{{ currencyCode amount }} }} }} }} }} }} &#39;&#39;&#39; variable = &#39;&#39;&#39; &#39;&#39;&#39; data_dict = gq_query(data, variable) . last_update_timestamp is the variable for timestamp . Thats it for now, I will update this post as an when I use more queries in my project .",
            "url": "https://vanshkapil.github.io/sundayposts/shopify/2020/10/28/Shopify-GraphQL-Queries-Getting-Started.html",
            "relUrl": "/shopify/2020/10/28/Shopify-GraphQL-Queries-Getting-Started.html",
            "date": " • Oct 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Getting started with Shopify API",
            "content": "I just started working with Shopify and needed a quick solution. I came across terms like GraphQL which I had no idea what it was initially. I tried to dodge it initially and tried to find a way around it. . Shopify does provide a way around it by using REST APIs but the documentation and information around is not very easy to use, especially for noob developers like myself. . First things first. You need to sign up for Shopify partner account. . There are Public, Custom and Private apps, I am building a Private app, because at the moment I do not want to go through Shopify approval process. . Before we can create an app we would need a development store. . Creating a development store . In your developer account, visit Stores section from left navigation menu. | Inside Stores page, you would find an Add Store button . | . Inside Add Store, choose Development store option and fill in your details. . | Store should be ready to use now. . | Create a Private App . App is created from inside the developer store you created in the previous step. . Click Apps section from left navigation menu. | In the Apps page, scroll right to the bottom of the page and look for Manage private apps . | Click Enable private app development . | Create Private apps . | Fill in the details and give required access and Create app . | The following page shows your API access details like API key, Password, Example URL and Shared Secret. Copy these details in a notepad and save for future use in your app development. . | Accessing Shopify API for App development . Shopify has REST or GraphQL APIs but they favor GraphQL, they also good documentation on getting started with GraphQL. This Youtube tutorial is a good place to start . Access REST API . REST APIs can be accessed by this simple function . def get_api_access(param): url = &#39;&lt;EXAMPLE URL&gt;/{0}.json&#39;.format(param) print(url) r=requests.get(url) if r.status_code != 200: return{ &#39;statusCode&#39;:r.status_code, &#39;headers&#39;:{&#39;Content-Type&#39;:&#39;application/json&#39;}, &#39;body&#39;: {&#39;message&#39;:&#39;Error Processing your request&#39;} } else: return{ &#39;statusCode&#39;:r.status_code, &#39;headers&#39;:{&#39;Content-Type&#39;:&#39;application/json&#39;}, &#39;body&#39;: json.loads(r.content) } . Example URL is what you received when you created the private app. It would look something like . https://e9f125c4fc520cd4d1df3d5f2d4dceb2:shppa_8b714e004ca528fq7d2842eac6c433f4@teststore.myshopify.com/admin/api/2020-10/products.json . The Example URL has your API key and Password which allows access. . Last part of the URL helps you access different APIs, for example in the above code snippet it is accessing products . You can pass in different parameters to the get_api_access(param) function to get required access. . Find all the REST API reference here . Access GraphQL API . GraphQL API can be accessed with the following function . def get_api_access(data, variables): out = [] # the final output list of dictionaries to be converted to a DF shop = &#39;testStore&#39; token = &#39;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&#39; headers = { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;X-Shopify-Access-Token&#39;: f&#39;{token}&#39;, } response = requests.post(f&#39;https://{shop}.myshopify.com/admin/api/2020-10/graphql.json&#39;, json={&#39;query&#39;: data, &#39;variables&#39;: variables}, headers=headers) return response.json() . token is your password and shop is the name of your store. . This function takes in data and variables parameters , which are part of GraphQL query , not in the scope of this post. . Passing in the Query data (data and variables) to get_api_access function returns the required JSON object. . Hope this post helps you get started. This by no means is a best way to get going, but as a newbie I found it difficult to get started and this is what I did. .",
            "url": "https://vanshkapil.github.io/sundayposts/shopify/2020/10/23/Getting-started-with-Shopify-API.html",
            "relUrl": "/shopify/2020/10/23/Getting-started-with-Shopify-API.html",
            "date": " • Oct 23, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vanshkapil.github.io/sundayposts/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vanshkapil.github.io/sundayposts/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}