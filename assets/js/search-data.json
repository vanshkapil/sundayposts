{
  
    
        "post0": {
            "title": "Title",
            "content": "I just started working with Shopify and needed a quick solution. I came across terms like GraphQL which I had no idea what it was initially. I tried to dodge it initially and tried to find a way around it. . Shopify does provide a way around it by using REST APIs but the documentation and information around is not very easy to use, especially for noob developers like myself. . First things first. You need to sign up for Shopify partner account. . There are Public, Custom and Private apps, I am building a Private app, because at the moment I do not want to go through Shopify approval process. . Before we can create an app we would need a development store. . Creating a development store . In your developer account, visit Stores section from left navigation menu. | Inside Stores page, you would find an Add Store button . | . Inside Add Store, choose Development store option and fill in your details. . | Store should be ready to use now. . | Create a Private App . App is created from inside the developer store you created in the previous step. . Click Apps section from left navigation menu. | In the Apps page, scroll right to the bottom of the page and look for Manage private apps . | Click Enable private app development . | Create Private apps . | Fill in the details and give required access and Create app . | The following page shows your API access details like API key, Password, Example URL and Shared Secret. Copy these details in a notepad and save for future use in your app development. . | Accessing Shopify API for App development . Shopify has REST or GraphQL APIs but they favor GraphQL, they also good documentation on getting started with GraphQL. This Youtube tutorial is a good place to start . Access REST API . REST APIs can be accessed by this simple function . def get_api_access(param): url = &#39;&lt;EXAMPLE URL&gt;/{0}.json&#39;.format(param) print(url) r=requests.get(url) if r.status_code != 200: return{ &#39;statusCode&#39;:r.status_code, &#39;headers&#39;:{&#39;Content-Type&#39;:&#39;application/json&#39;}, &#39;body&#39;: {&#39;message&#39;:&#39;Error Processing your request&#39;} } else: return{ &#39;statusCode&#39;:r.status_code, &#39;headers&#39;:{&#39;Content-Type&#39;:&#39;application/json&#39;}, &#39;body&#39;: json.loads(r.content) } . Example URL is what you received when you created the private app. It would look something like . https://e9f125c4fc520cd4d1df3d5f2d4dceb2:shppa_8b714e004ca528fq7d2842eac6c433f4@teststore.myshopify.com/admin/api/2020-10/products.json . The Example URL has your API key and Password which allows access. . Last part of the URL helps you access different APIs, for example in the above code snippet it is accessing products . You can pass in different parameters to the get_api_access(param) function to get required access. . Find all the REST API reference here . Access GraphQL API . GraphQL API can be accessed with the following function . def get_api_access(data, variables): out = [] # the final output list of dictionaries to be converted to a DF shop = &#39;testStore&#39; token = &#39;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&#39; headers = { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;X-Shopify-Access-Token&#39;: f&#39;{token}&#39;, } response = requests.post(f&#39;https://{shop}.myshopify.com/admin/api/2020-10/graphql.json&#39;, json={&#39;query&#39;: data, &#39;variables&#39;: variables}, headers=headers) return response.json() . token is your password and shop is the name of your store. . This function takes in data and variables parameters , which are part of GraphQL query , not in the scope of this post. . Passing in the Query data (data and variables) to get_api_access function returns the required JSON object. . Hope this post helps you get started. This by no means is a best way to get going, but as a newbie I found it difficult to get started and this is what I did. .",
            "url": "https://vanshkapil.github.io/sundayposts/2020/10/23/Getting-started-with-Shopify-API.html",
            "relUrl": "/2020/10/23/Getting-started-with-Shopify-API.html",
            "date": " • Oct 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vanshkapil.github.io/sundayposts/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vanshkapil.github.io/sundayposts/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vanshkapil.github.io/sundayposts/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}